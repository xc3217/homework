mixtable = [[0x2, 0x3, 0x1, 0x1], [0x1, 0x2, 0x3, 0x1], [0x1, 0x1, 0x2, 0x3], [0x3, 0x1, 0x1, 0x2]]
remixtable = [[0xe, 0xb, 0xd, 0x9], [0x9, 0xe, 0xb, 0xd], [0xd, 0x9, 0xe, 0xb], [0xb, 0xd, 0x9, 0xe]]
roundconst = [0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000]
S_table = [[0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
             [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
             [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
             [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
             [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
             [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
             [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
             [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
             [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
             [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
             [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
             [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
             [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
             [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
             [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
             [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]]

reS_table = [[0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
              [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
              [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
              [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
              [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
              [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
              [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
              [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
              [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
              [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
              [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
              [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
              [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
              [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
              [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
              [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]]
mod = 0b100011011
#S盒替代
def S_change(t):
    return [S_table[i][j] for i, j in [(x >> 4, x & 0xF) for x in t]]
#逆S盒替代
def reS_change(t):
    return [reS_table[i][j] for i, j in [(x >> 4, x & 0xF) for x in t]]
#行变换
def rowschange(t):
    return [t[0],t[5],t[10],t[15],
            t[4],t[9],t[14],t[3],
            t[8],t[13],t[2],t[7],
            t[12],t[1],t[6],t[11]]
#逆行变换
def rerowschange(t):
    return[t[0],t[13],t[10],t[7],
           t[4],t[1],t[14],t[11],
           t[8],t[5],t[2],t[15],
           t[12],t[9],t[6],t[3]]
#字移位
def rotword(t):
    return ((t >> 24)|(t<<8))
#字替代
def subword(t):
    result=0
    #获取某位的值
    for bit in range(4):
        i = (t >> (bit * 8 +4)) & 0xf
        j = t >> bit *8 & 0xF
        result ^= S_table[i][j] << bit * 8
    return result
#有限域中的乘法
def multiple( m, n):
    result = 0
    for i in range(n.bit_length()):
         if n & 1 << i:
             result ^= m << i
    return result
#进行约简
def simple(t):
    while t.bit_length() > 8:
           t ^= mod << t.bit_length()-9
    return t
#列混淆
def mixcolums(t):
    result = [0,0,0,0,
              0,0,0,0,
              0,0,0,0,
              0,0,0,0]
    for i in range(4):
        for j in range(4):
            for k in range(4):
                result[i + j*4] ^= multiple(mixtable[i][k],t[k + j * 4])
            result[i + j*4] = simple(result[i + j*4])
    return result

def remixcolums(t):
    result = [0, 0, 0, 0,
              0, 0, 0, 0,
              0, 0, 0, 0,
              0, 0, 0, 0]
    for i in range(4):
        for j in range(4):
            for k in range(4):
                result[i + j * 4] ^= multiple(remixtable[i][k], t[k + j * 4])
            result[i + j * 4] = simple(result[i + j * 4])
    return result

def key_expansion(key):
    w = [key >> 96 &0xFFFFFFFF,key >> 64 &0xFFFFFFFF,key >> 32 &0xFFFFFFFF,key &0xFFFFFFFF]+[0]*40
    for i in range(4,44):
        temp = w[i-1]
        if (i%4 == 0):
            temp = subword(rotword(temp))^roundconst[i//4-1]
        w[i] = w[i-4] ^ temp
    return [to0x(sum([w[4 * i] << 96, w[4 * i + 1] << 64,w[4 * i + 2] << 32, w[4 * i + 3]])) for i in range(11)]
def toint( t):
    return int.from_bytes(t,byteorder='big')

def to0x( t):
    return t.to_bytes(16, byteorder='big')

def roundkeyadd(t,keys,num):
    return [t[i] ^ keys[num][i] for i in range(16)]

def encrypt(plaintext,roundkeys):
    plaintext = roundkeyadd( plaintext,roundkeys,0 )
    for i in range(1,10):
        plaintext = S_change(plaintext)
        plaintext = rowschange(plaintext)
        plaintext = mixcolums(plaintext)
        plaintext = roundkeyadd(plaintext,roundkeys,i)
    plaintext = S_change(plaintext)
    plaintext = rowschange(plaintext)
    plaintext =roundkeyadd(plaintext,roundkeys,10)
    return plaintext

def decrypt(text,roundkeys):
    text = roundkeyadd(text,roundkeys,10)
    for i in range(1,10):
        text = rerowschange(text)
        text = reS_change(text)
        text = roundkeyadd(text,roundkeys,10-i)
        text = remixcolums(text)
    text = rerowschange(text)
    text = reS_change(text)
    text = roundkeyadd(text,roundkeys,0)
    return text





test = 0x6b665f5371e5523053575c116797ffff
print('原文=',hex(test))
test = to0x(test)
key = 0x000102030405060708090a0b0c0d0e0f
roundkeys = key_expansion(key)

encrptext = encrypt(test,roundkeys)
print('加密=' ,hex(toint(encrptext)))

decrytext = decrypt(encrptext,roundkeys)
print('解密=' , hex(toint(decrytext)))





